# CbyC_study
C/C++언어 정리

#if 1
#include <stdio.h>

int main(int argc, char** argv) {
	int ary[3] = { 10,20,30 };
	int* pa = ary;
	int i;

	printf("배열의 값: ");
	for (i = 0; i < 3; i++) {
		printf("%5d", *pa); // *(pa++) 로변경하고 아랫값을 지워서 하나로 합쳐도 동작한다.
		pa++;
	}
	return 0;
}

#endif

@1차
int ia[3] = {1,2,3};
ia[0] <=> *ia <=>*(ia+0)
@2차
int iaa[2][3] = {1,2,3,4,5,6};
iaa[1][2] <=> *(iaa[1]+2) <=> *(*(iaa+1)+2)

int i=3;
int j = i+1;
int k = 3+1;
-----------------------------------------------------------------------------------
//접근 연산자 사용해보기
ex_1)
#if 1
#include <stdio.h>
void func(int* p) {
	printf("%d", p[0]); //*(p+0)
	p[0] = 2; // *(p+0) = 2
}

int main(int argc, char** argv) {
	int ary[5] = { 1,2,3 };
	func(ary);
	printf("%d\n", ary[0]);// *(ary +0)
	return 0;
}

#endif

ex_2)
#if 1
#include <stdio.h>
#include <string.h>
void print_ary(int(*pa)[4]);
int main(void) {
	int ary[3][4] = {
		{1,2,3,4},
		{5,6,7,8},
		{9,10,11,12},
	};
	print_ary(ary); // &ary[0]

	return 0;
}

void print_ary(int(*pa)[4]) {
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 4; j++) {
			printf("%3d", pa[i][j]);// *(*(ary +i)+j)
		}
		printf("\n");
	}
}

#endif
-----------------------------------------------------------------------------------
int (*fp)(int, int); //함수 cf.int *fp(int,int)
int (*ap)[4]; //배열 cf.int *pa[4]
#if 1
#include <stdio.h>
#include <string.h>
int sum(int, int);
int main(void) {
	int (*fp)(int, int);
	int res;

	fp = sum;
	res = fp(10, 20);
	printf("result: %d\n", res);
	return 0;
}
int sum(int a, int b) {
	return (a + b);
}
#endif
-------------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <string.h>
void func(int (*fp)(int , int ));
int sum(int a, int b);
int mul(int a, int b);
int max(int a, int b);

int main(void) {
	int sel;

	printf("01 두 정수의 합\n");
	printf("02 두 정수의 곱\n");
	printf("03 두 정수 중에서 큰 값 계산\n");
	printf("원하는 연산을 선택하세요 : ");
	scanf("%d", &sel);
	switch (sel) 
	{
	case 1: func(sum); break;
	case 2: func(mul); break;
	case 3: func(max); break;
	}
	return 0;
}
void func(int (*fp)(int, int)) {
	int a, b;
	int res;

	printf("두 정수의 값을 입력하세요: ");
	scanf("%d%d", &a, &b);
	res = fp(a, b);
	printf("결과값은 : %d\n", res);
}
int sum(int a, int b) {
	return (a + b);
}
int mul(int a, int b) {
	return (a * b);
}
int max(int a, int b) {
	if (a > b) return a;
	else return b;
}
#endif
-------------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <string.h>

int main(void) {
	int a = 10;
	double b = 3.5;
	void* vp;

	vp = &a;
	printf("a : %d\n", *(int* )vp);

	vp = &b;
	printf("b : %.1lf\n", *(double*)vp);
	
	return 0;
}
#endif
-------------------------------------------------------------------------------------
프로그램 : 변수 + 함수(.data+.code)
*교제 454페이지
#if 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(void) {
	int* pi; // 동적 할당 역역을 연결할 포인터
	int i, sum = 0; // 반복 제어 변수(i)와 누적 변수(sum)

	pi = (int*)malloc(5 * sizeof(int)); //9행. 저장 공간 10바이트 할당
	if (pi == NULL) { // 메모리가 부족할 때의 예외 처리 구문
		printf("메모리가 부족합니다!\n");
		exit(1);
	}
	printf("다섯 명이 나이를 입력하세요 : ");
	for (i = 0; i < 5; i++) {
		scanf("%d", &pi[i]);
		sum += pi[i];
	}
	printf("다섯 명의 평균 나이 : %.1lf\n", (sum / 5.0));
	free(pi);

	return 0;
}
#endif
------------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(void) {
	int* pi;
	int size = 5;
	int count = 0;
	int num;
	int i;

	pi = (int*)calloc(size, sizeof(int)); // 먼저 5개의 저장 공간 할당, malloc과의 차이점은 초기화 유무
	while (1) {
		printf("양수만 입력하세요 => ");
		scanf("%d", &num);
		if (num <= 0) break;
		if (count == size) {
			size += 5;
			pi = (int*)realloc(pi, size * sizeof(int)); // 저장공간의 크기를 조절할 수있다.
		}
		pi[count++] = num;
	}
	for (i = 0; i < count; i++) {
		printf("%5d", pi[i]);
	}
	free(pi);
	return 0;
}
#endif
-------------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>
void func(int* p) {
	printf("%d\n", p[0]); //*(p+0)
	p[0] = 2; // *(p+0) = 2
}

int main() {
	//int ary[5] = { 1,2,3 };
	int *ary = (int*)malloc(sizeof(int) * 5);
	ary[0] = 1; ary[1] = 2; ary[2] = 3; ary[3] = 0; ary[4] = 0;
	func(ary);
	printf("%d \n", ary[0]);// *(ary +0)
	free(ary);
	return 0;
}

#endif
-------------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
void print_ary(int(*pa)[4]);
int main(void) {
	/*int ary[3][4] = {
		{1,2,3,4},
		{5,6,7,8},
		{9,10,11,12},
	}; */
	int(*ary)[4] = NULL;
	ary = (int(*)[4])malloc(sizeof(int) * 4 * 3);
	int i = 1;
	for (int r = 0; r < 3; r++) {
		for (int c = 0; c < 4; c++) {
			ary[r][c] = i++;
		}
	}
	print_ary(ary); // &ary[0]
	free(ary);
	return 0;
}

void print_ary(int(*pa)[4]) {
	for (int r = 0; r < 3; r++) {
		for (int c = 0; c < 4; c++) {
			printf("%3d", pa[r][c]);// *(*(ary +i)+j)
		}
		printf("\n");
	}
}

#endif
--------------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>
void assing(void);
void assign(void) {
	int a;

	a = 10;
	printf("assign함수 a: %d\n", a);
}

int main() {
	auto int a = 0; //auto는 생략가능

	assign();
	printf("main 함수 a : %d\n", a);

	return 0;
}

#endif
--------------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>
void assign10(void);
void assign20(void);
int a;
int main() {
	printf("함수 호출 전 a 값 : %d\n", a);
	assign10();
	assign20();
	printf("함수 호출 후 a 값 : %d\n", a);

	return 0;
}
void assign10(void) {
	a = 10;
}
void assign20(void) {
	int a;
	a = 20;
}
#endif
-----------------------------------------------------------------------------------
static - 지역변수, 전역변수, 함수 등에 사용
#if 1
#include <stdio.h>
#include <stdlib.h>
void auto_func(void);
void static_func(void);

int main() {
	int i;
	printf("일반 지역 변수(auto)를 사용한 함수...\n");
	for (i = 0; i < 3; i++) {
		auto_func();
	}
	
	printf("정적 지역 변수(static)를 사용한 함수...\n");
	for (i = 0; i < 3; i++) {
		static_func();
	}

	return 0;
}
void auto_func(void) { // 초기화 되어버리는 auto int a의 값
	int a = 0;

	a++;
	printf("%d\n", a);
}
void static_func(void) { // 초기화되지 않는 static int a의 값
	static int a = 0;

	a++;
	printf("%d\n", a);

}

#endif
-----------------------------------------------------------------------------------
레지스터 변수 = cpu내부의 변수를 사용
#if 1
#include <stdio.h>
#include <stdlib.h>

int main() {
	register int i;
	int sum = 0;
	for (i = 1; i <= 10000; i++) {
		sum += i;
	}
	printf("%d\n", sum);
	return 0;
}
#endif
-----------------------------------------------------------------------------------
*call by value
#if 1
#include <stdio.h>
#include <stdlib.h>
void add_ten(int b, int *B) {
	b = b + 10;
	*B = *B + 10; // B[0]=B[0]+10
	printf("b: %d\n", b);
	printf("B[0]: %d\n", *B);
}
int main() {
	int a = 10;
	int A[1] = { 100 };
	add_ten(a, A); // int b = a, call by value
	//int * B = &A[0], call by address
	printf("a: %d\n", a);
	printf("A[0]: %d\n", *A);

	return 0;
}
#endif
----------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>
int *sum(int a, int b) {
	static int res;
	res = a + b;
	return &res;
}
int main() {
	int* resp;

	resp = sum(10, 20);
	printf("두 정수의 합 : %d\n", *resp);

	return 0;
}
#endif
---------------------------------------------------------------------------------
* 구조체
#if 1
#include <stdio.h>
#include <stdlib.h>
struct student {
	int num;
	double grade;
};
int main() {
	struct student s1;

	s1.num = 2;
	s1.grade = 2.7;
	printf("학번 : %d\n", s1.num);
	printf("학점 : %.1lf\n", s1.grade);

	return 0;
}
#endif
-------------------------------------------------------------------------------
* pragma pack(1); //을 사용하면 구조체의 빈공간에 맞춰서 줄여준다.

#if 1
#include <stdio.h>
#include <stdlib.h>
#pragma pack(1)
struct student {
	char ch1;
	short num;
	int score;
	char ch2;
	double grade;
	char ch3;
};
int main() {
	printf("%zd", sizeof(student));

	return 0;
}
#endif
-----------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct profile {
	char name[20];
	int age;
	double height;
	char* intro; // 포인터 멤버를 사용하여 intro연결
};
int main() {
	struct profile yuni;

	strcpy(yuni.name, "서하윤"); // name멤버에 이름을 저장할 땐느 'strcpy'함수를 사용한다.
	yuni.age = 17;
	yuni.height = 164.5;

	yuni.intro = (char*)malloc(80); 
	printf("자기소개 : ");
	gets_s(yuni.intro, 80);

	printf("이름 : %s\n", yuni.name);
	printf("나이 : %d\n", yuni.age);
	printf("키 : %.1lf\n", yuni.height);
	printf("자기소개 : %s\n", yuni.intro);
	free(yuni.intro);

	return 0;
}
#endif
---------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct profile {
	int age;
	double height;
};
struct student {
	struct profile pf;
	int id;
	double grade;
};
int main(void) {
	struct student yuni;

	yuni.pf.age = 17;
	yuni.pf.height = 164.5;
	yuni.id = 315;
	yuni.grade = 4.3;

	printf("나이 : %d\n", yuni.pf.age);
	printf("키 : %.1lf\n", yuni.pf.height);
	printf("학번 : %.d\n", yuni.id);
	printf("학점 : %.1lf\n", yuni.grade);

	return 0;
}
#endif
---------------------------------------------------------------------------





