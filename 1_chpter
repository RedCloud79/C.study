# C언어의 특징
- 유닉스를 개발하기 위해 만든 언어
- 시스템 프로그래밍 가능(os 시스템)
- 이식성(portability)을 갖춘 프로그램 개발 가능(기종이 다른 컴퓨터에서도 사용할 수 있다.)
- 함수를 사용해 개별 프로그래밍 가능

@ 0일경우 비활성화, 1일경우 활성화
#if 0
~~
~~~~
#endif

ex_1) 기본 형태
#include <stdio.h> // include => import
#include <stdlib.h>

int main(void) {
	printf("Be happy! %d", 2034);
	system("pause");
	return 0;
}
*결과값
Be happy! 2034계속하려면 아무 키나 누르십시오 . . .

-----------------------------------------------------------------------------
* c의 값의 종류
#include <stdio.h>
int main(void) {
	printf("%d\n", 3); // 정수값 int <- integer
	printf("%lf\n", 3.14); // 실수값 double <- double precision
	printf("%s\n", "3.14"); // 문자열값 const char * <- constant character pointer
	printf("%c\n", '3'); // 문자값 const char <- constant character(상수 문자)
	printf("%c\n", 'a'); // 문자값 const char <- constant character(상수 문자)
}
*결과값
3
1374389535
3.14
3
a
-------------------------------------------------------------------------------
* lf와 f의 차이
int main(void) {
	printf("%f\n", 3.14); // 낮은 값의 실수형 데이터 처리 8by 4bit
	printf("%lf\n", 3.14); // 높은 값의 실수형 데이터 처리 8by 8bit
}
* 결과값
3.140000
3.140000
--------------------------------------------------------------------------------
* 값으로 하는 일 : 사칙연산, module(%)
#include <stdio.h>
int main(void) {
	printf("%d\n",3 + 4);
	printf("%d\n", 3 - 4);
	printf("%d\n", 3 * 4);
	printf("%d\n", 3 / 4); // 정수 : 몫
	printf("%lf\n", 3.0 / 4); //실수 : 몫과 나머지의 끝까지표기
	printf("%d\n", 3 % 4); // 나머지
}
* 결과값
7
-1
12
0
0.750000
3
-----------------------------------------------------------------------------
* 값으로 하는 일 : 비교 연산
int main(void) {
	printf("%d\n", 3 > 4); // 0이면 False, 1이면 True
	printf("%d\n", 3 >= 4);
	printf("%d\n", 3 < 4);
	printf("%d\n", 3 <= 4);
	printf("%d\n", 3 == 4);
	printf("%d\n", 3 != 4);
}
*결과값
0
0
1
1
0
1
------------------------------------------------------------------------------
* 값으로 하는 일 : 논리 연산
int main(void) {
	printf("%d\n", 3 > 4 && 5 > 6); // and 논리 곱
	printf("%d\n", 3 < 4 && 5 < 6);
	printf("%d\n", 3 > 4 || 5 > 6); // or 논리 합
	printf("%d\n", 3 < 4 || 5 < 6);
	printf("%d\n", !(3 < 4)); // not 논리 부정
	printf("%d\n", !(3 > 4));
}
* 결과값
0
1
0
1
0
1
----------------------------------------------------------------------
* 값의 그릇 : 변수, 값을 담기 : 할당
int main(void) {
	int a = 3;
	int b = 4;
	printf("%d\n", a+b);

	int c = a + b;
	printf("%d\n", c);
}
*결과값
7
7
---------------------------------------------------------------------
* 판단하기 1 : if
int main(void) {
	int age = 23; // 정수 변수
	if (age >= 19) {
		printf("adult\n");
	}
}
*결과값
adult
---------------------------------------------------------------------------
* 판단하기 2 : if-else
int main(void) {
	int age = 18; // 정수 변수
	if (age >= 19) {
		printf("adult\n");
	}
	else {
		printf("minor\n");
	}
}
*결과값
minor
----------------------------------------------------------------------
* 판단하기 3 : if-else if-else
int main(void) {
	int birth_year = 2004; // 정수 변수
	if (1981 <= birth_year && birth_year <= 1996 ) {
		printf("M generation\n");
	}
	else if(1997 <= birth_year && birth_year <= 2012) {
		printf("Z generation\n");
	}
	else {
		printf("???\n");
	}
}
*결과값
Z generation
---------------------------------------------------------------------
* 동작 반복하기 : while
int main(void) {
	int c_level = 0;
	while (c_level < 10) {
		printf("study c\n");
		c_level++; //c_level += 1; 같은 의미 이다.
	}
}
*결과값
study c
study c
study c
study c
study c
study c
study c
study c
study c
study c
-----------------------------------------------------------------------
* 동작 반복하기 : while-if-break
int main(void) {
	int c_level = 0;
	while (1) { //True
		printf("study c \n");
		c_level++;
		if (c_level >= 10) {
			break;
		}
	}
}
*결과값
study c
study c
study c
study c
study c
study c
study c
study c
study c
study c
----------------------------------------------------------------------
* for- while 문을 활용한 반복계산
int main(void) {
	for (int i = 0; i < 100; i++) {
		int cnt = 0;
		int a = 0, b = 0, c = 0;

		while (cnt < 100000) {
			cnt++;
			a = b = cnt;
			c = a + b;
		}
		printf("%d\n", c);
	}
}
*결과값
200000
200000
200000
200000
200000
200000
200000
...
----------------------------------------------------------------------
* 값을 담는 주머니 : 배열
int main(void) {
	//eggs[] = {"eggs0", "eggs1", "eggs2", "eggs3"};
	int eggs[] = { 0, 1, 2, 3 };
	printf("%d\n", eggs[0]);
	printf("%d\n", eggs[1]);
	printf("%d\n", eggs[2]);
	printf("%d\n", eggs[3]);
}
*결과값
0
1
2
3
------------------------------------------------------------------------
* 배열 처리하기 : for
int main(void) {
	int eggs[] = { 0, 1, 2, 3 };
	for (int i = 0; i < 4; i++) {
		printf("%d\n", eggs[i]);
	}
	
}
*결과값
0
1
2
3
------------------------------------------------------------------------
* 동작 묶기 1 : 함수
int add(int a, int b) {
	return a + b;
}
int main(void) {
	int a = 1, b = 2;
	int c = add(a, b);
	printf("%d\n", c);

}
*결과값
3
------------------------------------------------------------------------
* 동작 묶기 2 : 함수
int is_adult(int age) {
	return age >= 19; // True=(1), False=(0)
}
int main(void) {
	int my_age = 17;
	printf("%d\n",is_adult(my_age));

}
*결과값
0
-------------------------------------------------------------------------
* 변수 붂기 : struct 구조체 만들기
struct Student {
	char name[20];
	int age;

};
int main(void) {
	struct Student student_1 = { "Brad", 21 };
	printf("%s\n", student_1.name);
	printf("%d\n", student_1.age);
}
* 결과값
Brad
21



