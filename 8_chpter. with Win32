# CbyC_study
C/C++언어 정리
* 구조체 변수의 초기화와 대입
#if 1
#include <stdio.h>
#include <stdlib.h>
struct student
{
	int id;
	char name[20];
	double grade;
};
int main() {
	
	struct student s1 = { 315,"홍길동", 2.4 },
		s2 = { 316,"이순신", 3.7 },
		s3 = { 317,"세종대왕", 4.4 };
	struct student max;

	max = s1;
	if (s2.grade > max.grade) max = s2;
	if (s3.grade > max.grade) max = s3;

	printf("학번 : %d\n", max.id);
	printf("이름 : %s\n", max.name);
	printf("학점 : %.1lf\n", max.grade);

	return 0;
}
#endif
-------------------------------------------------------------------------------
#if 0
#include <stdio.h>
#include <stdlib.h>
struct vision {
	double left;
	double right;
	double middle[100];
};

struct vision exchange(struct vision robot);

int main(void) {
	struct vision robot;

	printf("%zd, %p\n", sizeof(robot), &robot);
	printf("시력 입력: ");
	scanf("%lf%lf", &(robot.left), &(robot. right));
	robot = exchange(robot);
	printf("바뀐 시력 : %.1lf %.1lf\n", robot.left, robot.right);

	return 0;
}
struct vision exchange(struct vision robot) {
	printf("%zd, %p\n", sizeof(robot), &robot);
	double temp;

	temp = robot.left;
	robot.left = robot.right;
	robot.right = temp;

	return robot;
}
#endif
-------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>
struct vision {
	double left;
	double right;
	double middle[100];
};
vision exchange(vision* robot) {
	printf("%zd, %p\n", sizeof(robot), &robot);
	double temp;

	temp = robot->left;
	robot->left = robot->right;
	robot->right = temp;

	return *robot;
}
int main(void) {
	struct vision robot = { 15.5, 20.0 };

	printf("%zd, %p\n", sizeof(robot), &robot);
	robot = exchange(&robot);
	printf("바뀐 시력 : %.1lf %.1lf\n", robot.left, robot.right);

	return 0;
}
#endif
-------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>
struct vision {
	double left;
	double right;
	double middle[100];
};
vision * exchange(vision* robot) {
	printf("%zd, %p, %p\n", sizeof(robot), &robot, robot);
	double temp;

	temp = robot->left;
	robot->left = robot->right;
	robot->right = temp;

	return robot;
}
int main(void) {
	struct vision robot = { 15.5, 20.0 };

	printf("%zd, %p\n", sizeof(robot), &robot);
	vision * vp = exchange(&robot);
	printf("바뀐 시력 : %.1lf %.1lf\n", robot.left, robot.right);

	return 0;
}
#endif
-------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>
struct score {
	int kor, eng, math;
};

int main(void) {
	struct score yuni = { 90, 80, 70 };
	struct score* ps = &yuni;
	printf("국어 : %d\n", (*ps).kor);
	printf("영어 : %d\n", ps->eng);
	printf("수학 : %d\n", ps->math);
	return 0;
}
#endif
-------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>
struct address {
	char name[20];
	int age;
	char tel[20];
	char addr[80];
};

int main(void) {
	struct address list[5] = {
		{"홍길동", 23, "111-1111", "울릉도 독도"},
		{"이순신", 35, "222-2222", "서울 건천동"},
		{"장보고", 19, "333-3333", "완도 청해진"},
		{"유관순", 15, "444-4444", "충남 천안"},
		{"안중근", 45, "555-5555", "황해도 해주"},
		};
	int i;

	for (i = 0; i < 5; i++) {
		printf("%10s%5d%15s%20s\n",
			list[i].name, list[i].age, list[i].tel, list[i].addr );
	}
	return 0;
}
#endif
--------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>
struct address {
	char name[20];
	int age;
	char tel[20];
	char addr[80];
};
void print_list(struct address *lp) {
	int i;

	for (i = 0; i < 5; i++) {
		printf("%10s%5d%15s%20s\n",
			(lp+i)->name, (lp + i)->age, (lp + i)->tel, (lp + i)->addr);
		//&lp[i].name, &lp[i].age, &lp[i].tel, &lp[i].addr);
	}
}
int main(void) {
	struct address list[5] = {
		{"홍길동", 23, "111-1111", "울릉도 독도"},
		{"이순신", 35, "222-2222", "서울 건천동"},
		{"장보고", 19, "333-3333", "완도 청해진"},
		{"유관순", 15, "444-4444", "충남 천안"},
		{"안중근", 45, "555-5555", "황해도 해주"},
		};

	print_list(list);
	
	return 0;
}
#endif
----------------------------------------------------------------------------------
*자기 참조 구조체
#if 1
#include <stdio.h>
#include <stdlib.h>
struct list {
	int num;
	struct list* next;
};
int main(void) {
	struct list a = { 10, 0 }, b = { 20, 0 }, c = { 30, 0 };
	struct list* head = &a, * current;

	a.next = &b;
	b.next = &c;

	printf("head->num : %d\n", head->num);
	printf("head->next->num : %d\n", head->next->num);

	printf("list all : ");
	current = head;
	while (current != NULL) {
		printf("%d ", current->num);
		current = current->next;
	}
	printf("\n");

	return 0;
}
#endif
-------------------------------------------------------------------------------
===============================================================================
*Win 32
#include <windows.h>
#include <stdio.h>
int main() {
	printf("befor\n");
	CreateWindow(L"listbox", L"Select on me", 
		WS_OVERLAPPEDWINDOW | WS_VISIBLE, 800, 400, 200, 200, 0, 0, 0, 0);
	// 버튼형식의 윈도우창, 출력글씨, [(가로), (세로)]윈도우창의 위치 2자리, 
	// 4면이 200인창 사이즈
	MessageBox(0, L"Hello Windows!", L"win", MB_YESNOCANCEL);
	// 2byte가 필요로 하여 'L'이 붙음
	
	printf("after\n");

}
-------------------------------------------------------------------------------
#include <windows.h>
#include <stdio.h>
int main() {
	
	CreateWindow(L"button", L"PUSH ME!",
		WS_OVERLAPPEDWINDOW | WS_VISIBLE, 800, 400, 200, 200, 0, 0, 0, 0);
	// 버튼형식의 윈도우창, 출력글씨, [(가로), (세로)]윈도우창의 위치, 
	// 4면이 200인창 사이즈
	MSG msg;
	while (1) {
		GetMessage(&msg, 0, 0, 0);
		switch (msg.message) {
		case WM_CHAR:
				printf("WM_CHAR");
				break;
		case WM_MOUSEMOVE:
				printf("WM_MOUSEMOVE");
				break;
		}
		printf(".");
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

}
--------------------------------------------------------------------------------
#include <windows.h>
#include <stdio.h>
int main() {
	
	CreateWindow(L"button", L"PUSH ME!",
		WS_OVERLAPPEDWINDOW | WS_VISIBLE, 800, 400, 200, 200, 0, 0, 0, 0);
	// 버튼형식의 윈도우창, 출력글씨, [(가로), (세로)]윈도우창의 위치, 
	// 4면이 200인창 사이즈
	MSG msg;
	while (1) {
		GetMessage(&msg, 0, 0, 0);
		switch (msg.message) {
		case WM_CHAR:
				printf("%c", LOWORD(msg.wParam));
				break;
		case WM_MOUSEMOVE:
				printf("(%d,%d)", LOWORD(msg.lParam),HIWORD(msg.lParam));
				break;
		}
		printf(".");
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

}
---------------------------------------------------------------------------------
Visual Studio  -> 상단탭의 [프로젝트] -> [프로젝트명 속성] -> [구성속성/고급] -> [문자집합]에서 
   [사용안함]으로 변경
#include <windows.h>
#include <stdio.h>
int main() {
	
	CreateWindow("button", "PUSH ME!",
		WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 100, 100, 0, 0, 0, 0);
	// 버튼형식의 윈도우창, 출력글씨, [(가로), (세로)]윈도우창의 위치, 
	// 4면이 200인창 사이즈
	MSG msg;
	while (1) {
		GetMessage(&msg, 0, 0, 0);
		static char buff[32] = { 0, };
		switch (msg.message) {
		case WM_CHAR:
			wsprintf(buff, "%c", LOWORD(msg.wParam));
			SetWindowText(msg.hwnd, buff);
			break;
		case WM_MOUSEMOVE:
			wsprintf(buff, "(%d,%d)", 
					LOWORD(msg.lParam),HIWORD(msg.lParam));
			SetWindowText(msg.hwnd, buff);
			break;
		}
		printf(".");
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

}
--------------------------------------------------------------------------------
#include <windows.h>
#include <stdio.h>
LRESULT CALLBACK MyWndProc(HWND, UINT, WPARAM, LPARAM);
int main() {
	WNDCLASS wc = { 0, };
	wc.lpszClassName = "MyWnd";
	wc.lpfnWndProc = MyWndProc;
	wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 뒷배경 창확대설정
	wc.hCursor = LoadCursor(0, IDC_ARROW); //마우스 커서 설정
	RegisterClass(&wc); //os등록

	CreateWindow("MyWnd", "Helo Window!",
		WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 400, 400, 0, 0, 0, 0);
	// 버튼형식의 윈도우창, 출력글씨, [(가로), (세로)]윈도우창의 위치, 
	// 4면이 200인창 사이즈

	MSG msg;
	while (1) {
		GetMessage(&msg, 0, 0, 0); //입력을 기다림
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

}
LRESULT CALLBACK
MyWndProc(HWND hWnd, UINT iMsg, WPARAM wParam, LPARAM lParam)
{
	static char buff[32] = { 0, };
		switch (iMsg) {
		case WM_CHAR:
			wsprintf(buff, "%c", LOWORD(wParam));
			SetWindowText(hWnd, buff);
			break;
		case WM_MOUSEMOVE:
			wsprintf(buff, "(%d,%d)",
				LOWORD(lParam), HIWORD(lParam));
			SetWindowText(hWnd, buff);
			break;
		}
	return DefWindowProc(hWnd, iMsg, wParam, lParam);
}
-----------------------------------------------------------------------------------
#include <windows.h>
#include <stdio.h>
LRESULT CALLBACK MyWndProc(HWND, UINT, WPARAM, LPARAM);
int main() {
	WNDCLASS wc = { 0, };
	wc.lpszClassName = "MyWnd";
	wc.lpfnWndProc = MyWndProc;
	wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 뒷배경 창확대설정
	wc.hCursor = LoadCursor(0, IDC_ARROW); //마우스 커서 설정
	RegisterClass(&wc);

	CreateWindow("MyWnd", "Helo Window!",
		WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 400, 400, 0, 0, 0, 0);
	// 버튼형식의 윈도우창, 출력글씨, [(가로), (세로)]윈도우창의 위치, 
	// 4면이 200인창 사이즈

	MSG msg;
	while (1) {
		GetMessage(&msg, 0, 0, 0);
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

}
LRESULT CALLBACK
MyWndProc(HWND hWnd, UINT iMsg, WPARAM wParam, LPARAM lParam)
{
	static char buff[32] = { 0, };
		switch (iMsg) {
		case WM_CHAR:
			wsprintf(buff, "%c", LOWORD(wParam));
			SetWindowText(hWnd, buff);
			return 0;
		case WM_MOUSEMOVE:
			wsprintf(buff, "(%d,%d)",
				LOWORD(lParam), HIWORD(lParam));
			SetWindowText(hWnd, buff);
			return 0;
		case WM_KEYDOWN:
		case WM_KEYUP:
			switch (LOWORD(wParam)) {
			case VK_LEFT: printf("<-"); break;
			case VK_RIGHT: printf("->"); break;
			case VK_UP: printf("ㅗ"); break;
			case VK_DOWN: printf("T"); break;
			case VK_SPACE : printf("_"); break;
			case VK_F1: printf("F1"); break;
			case 'A': printf("A"); break;
			}
			return 0;
		}
	return DefWindowProc(hWnd, iMsg, wParam, lParam);
}
-----------------------------------------------------------------------------------
#include <windows.h>
#include <stdio.h>
#include "resource.h"

LRESULT CALLBACK MyWndProc(HWND, UINT, WPARAM, LPARAM);
int main() {
	WNDCLASS wc = { 0, };
	wc.lpszClassName = "MyWnd";
	wc.lpfnWndProc = MyWndProc;
	wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 뒷배경 창확대설정
	wc.hCursor = LoadCursor(0, IDC_ARROW); //마우스 커서 설정
	wc.lpszMenuName = MAKEINTRESOURCE(IDR_MENU1);
	RegisterClass(&wc);

	CreateWindow("MyWnd", "Helo Window!",
		WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 400, 400, 0, 0, 0, 0);
	// 버튼형식의 윈도우창, 출력글씨, [(가로), (세로)]윈도우창의 위치, 
	// 4면이 200인창 사이즈

	MSG msg;
	while (1) {
		if(GetMessage(&msg, 0, 0, 0)==0) break;
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

}
LRESULT CALLBACK
MyWndProc(HWND hWnd, UINT iMsg, WPARAM wParam, LPARAM lParam)
{
	static char buff[32] = { 0, };
		switch (iMsg) {
		case WM_CHAR:
			wsprintf(buff, "%c", LOWORD(wParam));
			SetWindowText(hWnd, buff);
			return 0;
		case WM_MOUSEMOVE:
			wsprintf(buff, "(%d,%d)",
				LOWORD(lParam), HIWORD(lParam));
			SetWindowText(hWnd, buff);
			return 0;
		case WM_KEYDOWN:
		case WM_KEYUP:
			switch (LOWORD(wParam)) {
			case VK_LEFT: printf("<-"); break;
			case VK_RIGHT: printf("->"); break;
			case VK_UP: printf("ㅗ"); break;
			case VK_DOWN: printf("T"); break;
			case VK_SPACE : printf("_"); break;
			case VK_F1: printf("F1"); break;
			case 'A': printf("A"); break;
			}
			return 0;
		case WM_LBUTTONDOWN:
			printf("L(%d, %d)", LOWORD(lParam), HIWORD(lParam));
			return 0;
		case WM_CREATE:
			printf("여서 GUI를 꾸미세요");
			SetTimer(hWnd, 1001, 10, NULL);
			CreateWindow("button", "A", WS_CHILD | WS_VISIBLE, 10, 10, 60, 40,
				hWnd, (HMENU)2001, 0, 0);
			CreateWindow("button", "B", WS_CHILD | WS_VISIBLE, 100, 10, 60, 40,
				hWnd, (HMENU)2002, 0, 0);
			CreateWindow("button", "C", WS_CHILD | WS_VISIBLE, 200, 10, 60, 40,
				hWnd, (HMENU)2003, 0, 0);
			return 0;
		case WM_COMMAND:
			switch (LOWORD(wParam)) {
			case 2001:printf("A");break;
			case 2002:printf("B");break;
			case 2003:printf("C");break;
			case ID_FILE_NEW:printf("N"); break;
			case ID_FILE_SAVE:printf("S"); break;
			}
		case WM_TIMER:
			return 0;
		case WM_DESTROY:
			printf("윈도우를 닫습니다.");
			PostQuitMessage(0); //WM_QUIT -> 메시지큐
			return 0;
		
		}
	return DefWindowProc(hWnd, iMsg, wParam, lParam);
}
---------------------------------------------------------------------------------



